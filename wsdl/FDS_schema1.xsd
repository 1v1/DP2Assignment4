<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema version="1.0" targetNamespace="http://pad.polito.it/FDS"
	xmlns:tns="http://pad.polito.it/FDS" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<xs:element name="InvalidArgument" type="tns:InvalidArgument" />

	<xs:element name="Monitor" type="tns:Monitor" />

	<xs:element name="UnknownFlight" type="tns:UnknownFlight" />

	<xs:element name="UnknownFlightInstance" type="tns:UnknownFlightInstance" />

	<xs:element name="getAircrafts" type="tns:getAircrafts" />

	<xs:element name="getAircraftsResponse" type="tns:getAircraftsResponse" />

	<xs:element name="getFlight" type="tns:getFlight" />

	<xs:element name="getFlightInstance" type="tns:getFlightInstance" />

	<xs:element name="getFlightInstanceResponse" type="tns:getFlightInstanceResponse" />

	<xs:element name="getFlightInstances" type="tns:getFlightInstances" />

	<xs:element name="getFlightInstancesResponse" type="tns:getFlightInstancesResponse" />

	<xs:element name="getFlightResponse" type="tns:getFlightResponse" />

	<xs:element name="getFlights" type="tns:getFlights" />

	<xs:element name="getFlightsResponse" type="tns:getFlightsResponse" />

	<xs:element name="getPassengers" type="tns:getPassengers" />

	<xs:element name="getPassengersResponse" type="tns:getPassengersResponse" />

	<xs:element name="CancelledFlight" type="tns:CancelledFlight" />

	<xs:element name="FullyBookedFlight" type="tns:FullyBookedFlight" />

	<xs:element name="InvalidStatus" type="tns:InvalidStatus" />

	<xs:element name="NotBoarding" type="tns:NotBoarding" />

	<xs:element name="PassengerAlreadyRegistered" type="tns:PassengerAlreadyRegistered" />

	<xs:element name="SeatAlreadyAssigned" type="tns:SeatAlreadyAssigned" />

	<xs:element name="assignSeat" type="tns:assignSeat" />

	<xs:element name="assignSeatResponse" type="tns:assignSeatResponse" />

	<xs:element name="cancelFlightInstance" type="tns:cancelFlightInstance" />

	<xs:element name="cancelFlightInstanceResponse" type="tns:cancelFlightInstanceResponse" />

	<xs:element name="changeBoardingGate" type="tns:changeBoardingGate" />

	<xs:element name="changeBoardingGateResponse" type="tns:changeBoardingGateResponse" />

	<xs:element name="changeDelay" type="tns:changeDelay" />

	<xs:element name="changeDelayResponse" type="tns:changeDelayResponse" />

	<xs:element name="getBoardedPassengers" type="tns:getBoardedPassengers" />

	<xs:element name="getBoardedPassengersResponse" type="tns:getBoardedPassengersResponse" />

	<xs:element name="registerPassenger" type="tns:registerPassenger" />

	<xs:element name="registerPassengerResponse" type="tns:registerPassengerResponse" />

	<xs:element name="startBoarding" type="tns:startBoarding" />

	<xs:element name="startBoardingResponse" type="tns:startBoardingResponse" />


	<xs:complexType name="getAircrafts">
		<xs:sequence />
	</xs:complexType>

	<xs:complexType name="getAircraftsResponse">
		<xs:sequence>
			<xs:element name="return" type="tns:aircraftType"
				minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="aircraftType">
		<xs:sequence>
			<xs:element name="freeSeat" type="xs:string" nillable="false"
				minOccurs="0" maxOccurs="unbounded" />
			<xs:element name="model" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Monitor">
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getPassengers">
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" nillable="true" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" nillable="true" />
			<xs:element name="prefix" type="xs:string" minOccurs="1"
				nillable="true" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getPassengersResponse">
		<xs:sequence>
			<xs:element name="return" type="tns:passenger" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="passenger">
		<xs:sequence>
			<xs:element name="boarded" type="xs:boolean" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" />
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="name" type="xs:string" minOccurs="1" />
			<xs:element name="seat" type="tns:SeatType" minOccurs="1"
				nillable="true" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="InvalidArgument">
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="UnknownFlightInstance">
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlightInstances">
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" nillable="true" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" nillable="true" />
			<xs:element name="flightStatus" type="tns:flightInstanceStatus"
				minOccurs="1" nillable="true" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlightInstancesResponse">
		<xs:sequence>
			<xs:element name="return" type="tns:flightInstance"
				minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="flightInstance">
		<xs:sequence>
			<xs:element name="aircraft" type="tns:aircraftType"
				minOccurs="0" />
			<xs:element name="date" type="xs:dateTime" minOccurs="1" />
			<xs:element name="delay" type="xs:int" />
			<xs:element name="departureGate" type="xs:string"
				minOccurs="0" />
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="status" type="tns:flightInstanceStatus"
				minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="UnknownFlight">
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlightInstance">
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlightInstanceResponse">
		<xs:sequence>
			<xs:element name="return" type="tns:flightInstance"
				minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlights">
		<xs:sequence>
			<xs:element name="departureAirport" type="tns:AirportType"
				minOccurs="0" nillable="true" />
			<xs:element name="destinationAirport" type="tns:AirportType"
				minOccurs="0" nillable="true" />
			<xs:element name="departureTime" type="xs:dateTime"
				minOccurs="0" nillable="true" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlightsResponse">
		<xs:sequence>
			<xs:element name="return" type="tns:flight" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="flight">
		<xs:sequence>
			<xs:element name="departureAirport" type="tns:AirportType"
				minOccurs="0" />
			<xs:element name="departureTime" type="tns:time"
				minOccurs="0" />
			<xs:element name="destinationAirport" type="tns:AirportType"
				minOccurs="0" />
			<xs:element name="number" type="xs:string" minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="time">
		<xs:sequence>
			<xs:element name="hour" type="xs:int" />
			<xs:element name="minute" type="xs:int" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlight">
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getFlightResponse">
		<xs:sequence>
			<xs:element name="return" type="tns:flight" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="changeBoardingGate">
		<xs:annotation>
			<xs:documentation>
				This complex type is composed by flight ID and
				departure date, which combined together uniquely identify
				a single
				flight instance, and the new value of the boarding gate.
				All of these
				element are mandatory.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" nillable="false" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" nillable="false" />
			<xs:element name="gate" type="xs:string" minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="changeBoardingGateResponse">
		<xs:sequence />
	</xs:complexType>

	<xs:complexType name="cancelFlightInstance">
		<xs:annotation>
			<xs:documentation>
				The flightID and departure date uniquely identify
				the single flight instance that the user wants to delete.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" nillable="false" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" nillable="false" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="cancelFlightInstanceResponse">
		<xs:sequence />
	</xs:complexType>

	<xs:complexType name="getBoardedPassengers">

		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" nillable="false" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" nillable="false" />
			<xs:element name="pageNumber" type="xs:int" minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="getBoardedPassengersResponse">
		<xs:annotation>
			<xs:documentation>
				The flightID and departure date uniquely identify
				the single flight instance that the user wants to delete.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="lastPage" type="xs:boolean" minOccurs="1" />
			<xs:element name="pageNumber" type="xs:int" minOccurs="1" />
			<xs:element name="return" type="tns:passenger" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="changeDelay">
		<xs:annotation>
			<xs:documentation>
				In order to change the value of the delay of a
				flight instance is mandatory to specify the flight ID and the
				departure date and the new delay value. Therefore all these three
				elements are mandatory.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" />
			<xs:element name="delay" type="xs:int" minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="changeDelayResponse">
		<xs:sequence />
	</xs:complexType>

	<xs:complexType name="assignSeat">
		<xs:annotation>
			<xs:documentation>
				A passenger is uniquely identify by her name. A
				single passenger can be registered for many flight instances.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="passengerName" type="xs:string"
				minOccurs="1" />
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="assignSeatResponse">
		<xs:sequence>
			<xs:element name="return" type="tns:boardingInfo"
				minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="boardingInfo">
		<xs:annotation>
			<xs:documentation>
				This type contains all the information about the
				boarding of a single passenger on a flight instance.
				Flight id,
				departure date and passengerName are mandatory, because they
				uniquely identify the passenger and the flight isntance on which she
				has been registered.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="delay" type="xs:int" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" />
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="gate" type="xs:string" minOccurs="0" />
			<xs:element name="passengerName" type="xs:string"
				minOccurs="1" />
			<xs:element name="seat" type="tns:SeatType" minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="SeatAlreadyAssigned">
		<xs:annotation>
			<xs:documentation>
				This fault is sent when the specified passenger has
				already received a seat on the specified flight instance.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="FullyBookedFlight">
		<xs:annotation>
			<xs:documentation>
				This fault is sent when the flight instance, on
				which the user had tried to receive a seat, is fully booked.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="startBoarding">
		<xs:annotation>
			<xs:documentation>
				In order to start the boarding operations, the user
				must specify the flight ID and the departure date which uniquely
				identify a single flight instance.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="startBoardingResponse">
		<xs:sequence />
	</xs:complexType>

	<xs:complexType name="CancelledFlight">
		<xs:annotation>
			<xs:documentation>
				This fault warns the user that the specified flight
				instance has been cancelled.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="InvalidStatus">
		<xs:annotation>
			<xs:documentation>
				This fault warns the user that the specified flight
				instance is in an invalid status for the specified operation.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="registerPassenger">
		<xs:annotation>
			<xs:documentation>
				In order to register a passenger the user must
				specify the flight ID and departure date to uniquely identify the
				flight instance and the passenger name which uniquely identifies a
				single passenger.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="flightID" type="tns:FlightIDType"
				minOccurs="1" />
			<xs:element name="departureDate" type="xs:dateTime"
				minOccurs="1" />
			<xs:element name="passengerName" type="xs:normalizedString"
				minOccurs="1" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="registerPassengerResponse">
		<xs:sequence />
	</xs:complexType>

	<xs:complexType name="NotBoarding">
		<xs:annotation>
			<xs:documentation>
				This fault warns the user that the status of the
				specified flight
				instance is not boarding.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="PassengerAlreadyRegistered">
		<xs:annotation>
			<xs:documentation>
				This fault warns the user that the specified
				passenger has already been registered for the specified flight
				instance.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="message" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>


	<xs:simpleType name="flightInstanceStatus">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ARRIVED" />
			<xs:enumeration value="BOARDING" />
			<xs:enumeration value="BOOKING" />
			<xs:enumeration value="CANCELLED" />
			<xs:enumeration value="CHECKINGIN" />
			<xs:enumeration value="DEPARTED" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="FlightIDType">
		<xs:restriction base="xs:normalizedString">
			<xs:pattern value="([A-Z][A-Z])([0-9]{0,4})" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="SeatType">
		<xs:restriction base="xs:normalizedString">
			<xs:pattern value="^[A-Z]{2}[0-9]{1,4}$" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="AirportType">
		<xs:restriction base="xs:normalizedString">
			<xs:pattern value="[A-Z]{3}"></xs:pattern>
		</xs:restriction>
	</xs:simpleType>

</xs:schema>

