
package it.polito.dp2.FDS.sol4.client.gen;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.Response;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Info", targetNamespace = "http://pad.polito.it/FDSInfo")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Info {


    /**
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceResponse>
     */
    @WebMethod(operationName = "getFlightInstance")
    public Response<GetFlightInstanceResponse> getFlightInstanceAsync(
        @WebParam(name = "getFlightInstance", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlightInstance parameters);

    /**
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightInstance")
    public Future<?> getFlightInstanceAsync(
        @WebParam(name = "getFlightInstance", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlightInstance parameters,
        @WebParam(name = "getFlightInstanceResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightInstanceResponse> asyncHandler);

    /**
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceResponse
     * @throws UnknownFlightInstanceException
     * @throws InvalidArgumentException
     * @throws MonitorException
     */
    @WebMethod
    @WebResult(name = "getFlightInstanceResponse", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceResponse", fault = {
        @FaultAction(className = InvalidArgumentException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstance/Fault/InvalidArgument"),
        @FaultAction(className = MonitorException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstance/Fault/Monitor"),
        @FaultAction(className = UnknownFlightInstanceException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstance/Fault/UnknownFlightInstance")
    })
    public GetFlightInstanceResponse getFlightInstance(
        @WebParam(name = "getFlightInstance", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlightInstance parameters)
        throws InvalidArgumentException, MonitorException, UnknownFlightInstanceException
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetAircraftsResponse>
     */
    @WebMethod(operationName = "getAircrafts")
    public Response<GetAircraftsResponse> getAircraftsAsync(
        @WebParam(name = "getAircrafts", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetAircrafts parameters);

    /**
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAircrafts")
    public Future<?> getAircraftsAsync(
        @WebParam(name = "getAircrafts", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetAircrafts parameters,
        @WebParam(name = "getAircraftsResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetAircraftsResponse> asyncHandler);

    /**
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetAircraftsResponse
     * @throws MonitorException
     */
    @WebMethod
    @WebResult(name = "getAircraftsResponse", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getAircraftsRequest", output = "http://pad.polito.it/FDSInfo/Info/getAircraftsResponse", fault = {
        @FaultAction(className = MonitorException.class, value = "http://pad.polito.it/FDSInfo/Info/getAircrafts/Fault/Monitor")
    })
    public GetAircraftsResponse getAircrafts(
        @WebParam(name = "getAircrafts", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetAircrafts parameters)
        throws MonitorException
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightResponse>
     */
    @WebMethod(operationName = "getFlight")
    public Response<GetFlightResponse> getFlightAsync(
        @WebParam(name = "getFlight", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlight parameters);

    /**
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlight")
    public Future<?> getFlightAsync(
        @WebParam(name = "getFlight", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlight parameters,
        @WebParam(name = "getFlightResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightResponse> asyncHandler);

    /**
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightResponse
     * @throws InvalidArgumentException
     * @throws UnknownFlightException
     * @throws MonitorException
     */
    @WebMethod
    @WebResult(name = "getFlightResponse", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightResponse", fault = {
        @FaultAction(className = InvalidArgumentException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlight/Fault/InvalidArgument"),
        @FaultAction(className = MonitorException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlight/Fault/Monitor"),
        @FaultAction(className = UnknownFlightException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlight/Fault/UnknownFlight")
    })
    public GetFlightResponse getFlight(
        @WebParam(name = "getFlight", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlight parameters)
        throws InvalidArgumentException, MonitorException, UnknownFlightException
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightInstancesResponse>
     */
    @WebMethod(operationName = "getFlightInstances")
    public Response<GetFlightInstancesResponse> getFlightInstancesAsync(
        @WebParam(name = "getFlightInstances", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlightInstances parameters);

    /**
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightInstances")
    public Future<?> getFlightInstancesAsync(
        @WebParam(name = "getFlightInstances", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlightInstances parameters,
        @WebParam(name = "getFlightInstancesResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightInstancesResponse> asyncHandler);

    /**
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightInstancesResponse
     * @throws InvalidArgumentException
     * @throws UnknownFlightException
     * @throws MonitorException
     */
    @WebMethod
    @WebResult(name = "getFlightInstancesResponse", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesResponse", fault = {
        @FaultAction(className = InvalidArgumentException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstances/Fault/InvalidArgument"),
        @FaultAction(className = MonitorException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstances/Fault/Monitor"),
        @FaultAction(className = UnknownFlightException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstances/Fault/UnknownFlight")
    })
    public GetFlightInstancesResponse getFlightInstances(
        @WebParam(name = "getFlightInstances", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlightInstances parameters)
        throws InvalidArgumentException, MonitorException, UnknownFlightException
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightsResponse>
     */
    @WebMethod(operationName = "getFlights")
    public Response<GetFlightsResponse> getFlightsAsync(
        @WebParam(name = "getFlights", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlights parameters);

    /**
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlights")
    public Future<?> getFlightsAsync(
        @WebParam(name = "getFlights", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlights parameters,
        @WebParam(name = "getFlightsResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightsResponse> asyncHandler);

    /**
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightsResponse
     * @throws InvalidArgumentException
     * @throws MonitorException
     */
    @WebMethod
    @WebResult(name = "getFlightsResponse", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightsRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightsResponse", fault = {
        @FaultAction(className = InvalidArgumentException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlights/Fault/InvalidArgument"),
        @FaultAction(className = MonitorException.class, value = "http://pad.polito.it/FDSInfo/Info/getFlights/Fault/Monitor")
    })
    public GetFlightsResponse getFlights(
        @WebParam(name = "getFlights", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetFlights parameters)
        throws InvalidArgumentException, MonitorException
    ;

    /**
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetPassengersResponse>
     */
    @WebMethod(operationName = "getPassengers")
    public Response<GetPassengersResponse> getPassengersAsync(
        @WebParam(name = "getPassengers", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetPassengers parameters);

    /**
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPassengers")
    public Future<?> getPassengersAsync(
        @WebParam(name = "getPassengers", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetPassengers parameters,
        @WebParam(name = "getPassengersResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetPassengersResponse> asyncHandler);

    /**
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetPassengersResponse
     * @throws UnknownFlightInstanceException
     * @throws InvalidArgumentException
     * @throws MonitorException
     */
    @WebMethod
    @WebResult(name = "getPassengersResponse", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getPassengersRequest", output = "http://pad.polito.it/FDSInfo/Info/getPassengersResponse", fault = {
        @FaultAction(className = InvalidArgumentException.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengers/Fault/InvalidArgument"),
        @FaultAction(className = MonitorException.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengers/Fault/Monitor"),
        @FaultAction(className = UnknownFlightInstanceException.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengers/Fault/UnknownFlightInstance")
    })
    public GetPassengersResponse getPassengers(
        @WebParam(name = "getPassengers", targetNamespace = "http://pad.polito.it/FDSInfo", partName = "parameters")
        GetPassengers parameters)
        throws InvalidArgumentException, MonitorException, UnknownFlightInstanceException
    ;

}
